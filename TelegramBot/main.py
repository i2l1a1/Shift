import asyncio
from aiogram import Bot, Dispatcher, types
from environs import Env
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.types.web_app_info import WebAppInfo
from fastapi import FastAPI
import uvicorn
from pydantic import BaseModel
import aiohttp
import random

dp = Dispatcher()


class Config:
    bot_token = ""
    webapp_url = ""


config = Config()

env = Env()
env.read_env(".env")
config.bot_token = env("BOT_TOKEN")
config.webapp_url = env("WEBAPP_URL")

bot = Bot(config.bot_token)


async def start_bot():
    await dp.start_polling(bot)


async def start_server():
    uvicorn_config = uvicorn.Config("main:app", port=9092, host="0.0.0.0", log_level="info", reload=True)
    server = uvicorn.Server(uvicorn_config)
    await server.serve()


app = FastAPI()


async def main():
    bot_task = asyncio.create_task(start_bot())
    server_task = asyncio.create_task(start_server())
    await asyncio.gather(bot_task, server_task)


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    webapp_button = InlineKeyboardButton(
        text="–û—Ç–∫—Ä—ã—Ç—å webapp",
        web_app=WebAppInfo(url=config.webapp_url)
    )
    webapp_keyboard = InlineKeyboardMarkup(inline_keyboard=[[webapp_button]])

    await message.answer("üî•")
    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–µ–± –∞–ø–ø–æ–º...", reply_markup=webapp_keyboard)


class MessageForUser(BaseModel):
    text: str
    habit_id: int
    with_buttons: bool


@app.post("/send_message_for_user_with_buttons/{user_id}")
async def send_message_for_user_with_buttons(user_id: int, message: MessageForUser):
    print("in send_message_for_user_with_buttons")
    if message.with_buttons:
        yes_button = InlineKeyboardButton(
            text="‚úÖ",
            callback_data=f"yes_{message.habit_id}"
        )
        no_button = InlineKeyboardButton(
            text="‚ùå",
            callback_data=f"no_{message.habit_id}"
        )
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[no_button, yes_button]])

        await bot.send_message(user_id,
                               f"–í—ã–ø–æ–ª–Ω–∏–ª–∏ –ª–∏ –≤—ã —Å–µ–≥–æ–¥–Ω—è –ø—Ä–∏–≤—ã—á–∫—É ¬´{message.text}¬ª?",
                               reply_markup=keyboard)
    else:
        print("in send_message_for_user_with_buttons without buttons", user_id, message)
        await bot.send_message(user_id, message.text)

    return {"status": "success"}


async def send_habit_confirmation(fastapi_url: str, habit_id: str, user_id: int, pressed_button: str):
    async with aiohttp.ClientSession(connector=aiohttp.TCPConnector(ssl=False)) as session:
        url = f"{fastapi_url}/edit_habit/add_another_result/{habit_id}"
        payload = {
            "pressed_button": pressed_button,
            "tg_user_id": str(user_id)
        }
        await session.post(url, json=payload)


def answer_for_user_button_push(is_successful, user_name):
    success_templates = [
        (
            f"–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, {user_name}! –°–µ–≥–æ–¥–Ω—è –≤—ã —Å–¥–µ–ª–∞–ª–∏ –µ—â—ë –æ–¥–∏–Ω —à–∞–≥ –∫ —Ü–µ–ª–∏. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™"
        ),
        (
            f"–û—Ç–ª–∏—á–Ω–æ, {user_name}! –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç. –ü–æ–±–∞–ª—É–π—Ç–µ —Å–µ–±—è –Ω–µ–±–æ–ª—å—à–æ–π –Ω–∞–≥—Ä–∞–¥–æ–π ‚Äî –≤—ã —ç—Ç–æ–≥–æ –∑–∞—Å–ª—É–∂–∏–ª–∏ üëç"
        ),
        (
            f"–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ, {user_name}!"
            f" –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞—á—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üöÄ"
        ),
        (
            f"{user_name}, —Å–µ–≥–æ–¥–Ω—è –≤—ã —Å–ø—Ä–∞–≤–∏–ª–∏—Å—å –Ω–∞ –æ—Ç–ª–∏—á–Ω–æ! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–≥—Ä–∞–¥–∏—Ç—å —Å–µ–±—è –∑–∞ —Å–≤–æ–∏ —É—Å–ø–µ—Ö–∏ üòÄ"
        ),
        (
            f"–ü–æ—Ç—Ä—è—Å–∞—é—â–µ, {user_name}! –í—ã –¥–æ–ª–∂–Ω—ã –Ω–∞–≥—Ä–∞–¥–∏—Ç—å —Å–µ–±—è –∑–∞ —Ö–æ—Ä–æ—à–∏–µ —É—Å–ø–µ—Ö–∏ üòè"
        ),
    ]

    failure_templates = [
        (
            f"{user_name}, –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è!"
            f" –ü–æ–ø—ã—Ç–∞–π—Ç–µ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫–∏, —á—Ç–æ–±—ã –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —Ç–æ—á–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ü–µ–ª—å üôè"
        ),
        (
            f"–°–±–æ–π ‚Äî —ç—Ç–æ —Ç–æ–∂–µ –æ–ø—ã—Ç, {user_name}. –ü–æ–¥—É–º–∞–π—Ç–µ, —á—Ç–æ –º–æ–∂–Ω–æ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –∏ –≤–ø–µ—Ä–µ–¥ –∫ –Ω–æ–≤—ã–º –ø–æ–±–µ–¥–∞–º üí™"
        ),
        (
            f"–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å, {user_name}. –°–µ–≥–æ–¥–Ω—è –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –Ω–æ –≤—ã —Å–∏–ª—å–Ω–µ–µ –ª—é–±–æ–≥–æ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è üòä"
        ),
        (
            f"{user_name}, –Ω–µ —Å–¥–∞–≤–∞–π—Ç–µ—Å—å! –ö–∞–∂–¥—ã–π –º–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ –¥–µ–ª–∞–µ—Ç –≤–∞—Å —Å–∏–ª—å–Ω–µ–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ üí´"
        ),
        (
            f"{user_name}, –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –æ–ø—ã—Ç, —á—Ç–æ–±—ã –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ –∫ —Ü–µ–ª–∏ ‚ö°Ô∏è"
        ),

    ]

    return random.choice(success_templates if is_successful else failure_templates)


@dp.callback_query(lambda c: c.data.startswith("yes_"))
async def process_callback_yes(callback_query: CallbackQuery):
    habit_id = callback_query.data.split("_")[1]
    await bot.answer_callback_query(callback_query.id)

    user_name = callback_query.from_user.first_name if callback_query.from_user.first_name else "–¥—Ä—É–≥"
    await callback_query.message.edit_text(answer_for_user_button_push(True, user_name),
                                           reply_markup=None)

    fastapi_url = env("SERVER_URL")
    await send_habit_confirmation(fastapi_url, habit_id, callback_query.from_user.id, "yes")

    print(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–¥–∞' [id={callback_query.from_user.id}, habit_id={habit_id}]")


@dp.callback_query(lambda c: c.data.startswith("no_"))
async def process_callback_no(callback_query: CallbackQuery):
    habit_id = callback_query.data.split("_")[1]
    await bot.answer_callback_query(callback_query.id)

    user_name = callback_query.from_user.first_name if callback_query.from_user.first_name else "–¥—Ä—É–≥"
    await callback_query.message.edit_text(answer_for_user_button_push(False, user_name), reply_markup=None)

    fastapi_url = env("SERVER_URL")
    await send_habit_confirmation(fastapi_url, habit_id, callback_query.from_user.id, "no")

    print(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–Ω–µ—Ç' [id={callback_query.from_user.id}, habit_id={habit_id}]")


if __name__ == "__main__":
    asyncio.run(main())
